environment_name: stage
owner: agoro
replicaCount: 1

awsRoleAnnotations:
  role: agoro-adviser-backend-pod-ses-stage

image:
  repository: 236579017311.dkr.ecr.us-east-2.amazonaws.com/sandbox-backend
  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  port: 5000
  containerPort: 3000

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-2:236579017311:certificate/9abc4651-1710-470b-b5b9-f4cd1e15f5d0
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
    #alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=600
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/group.name: oa-internal
  hosts:
    - host: api-sandbox.us.agorocarbon.com
      paths:
        - '/'

labels:
  app: api-sandbox
  environment: stage

resources:
  limits:
    memory: 2048Mi
  requests:
    memory: 1024Mi

env:
  LOG_LEVEL: info
  NODE_ENV: stage
  AUTH0_JWKS_URI: https://dev-agoro.us.auth0.com/.well-known/jwks.json
  AUTH0_DOMAIN: https://dev-agoro.us.auth0.com/

#  ENABLED_DB: true
#  TYPEORM_HOST:
#  TYPEORM_PORT:
#  TYPEORM_USERNAME:
#  TYPEORM_PASSWORD:
#  TYPEORM_DATABASE:

  PORT: 3000
